# dubbo

提供面向接口的远程调用，智能容错和负载均衡，以及服务的自动注册和发现

https://blog.csdn.net/yuanshangshenghuo/article/details/107615058

## 概要了解
### dubbo能做什么
- 服务开发：RMI或Hessian只能简单的暴露和引用远程服务，进行开发，通过配置URL地址进行调用，F5等硬件进行负载均衡
- 服务软负载均衡：通过服务注册中心，动态的注册发现服务，使服务的位置透明，实现软复杂均衡和容错机制，降低对硬件负载均衡的依赖，减少部分成本
- 服务监控：统计服务每天的调用量，响应时间，作为容量规划的参考指标，将某台机器的权重一直加大，并在加大的过程中记录响应时间的变化，并在加大的过程中记录服务的响应时间的变化，直到响应时间到达阈值，记录这个访问量，乘以节点数推出总容量
- 服务治理：可在线动态调整机器权重、服务分组隔离、禁用和启用服务。

### 注册中心挂了，还能访问到服务吗
可以，因为dubbo服务消费者在第一次调用后，会将服务提供方地址缓存到本地，以后再调用则不会访问注册中心
--- 地址缓存

### 超时
服务调用方的超时配置会覆盖提供方的超时时间；
### 重试次数
配置两次，就会重试两次，一共调用3次，默认两次

### 多版本
使用version属性来实现多版本

### 负载均衡
@Reference(loadbalance=“Random”)
- Random：按照权重随机，默认值；按照权重划分调用的比例，每个节点默认权重都是100
- RoundRobin：按权重轮询
- LeastActive：最少活跃调用数，相同活跃数的请求随机
- ConsistentHash：一致性hash，相同参数的请求总是发到同一个提供者

### 集群容错
- failover cluster：失败重试，默认值
- failfast clustre：快速失败，出现异常立即报错
- failsafe cluster：安全失败，出现异常后，忽略异常，返回空结果
- failback cluster：失败自动恢复，后台记录失败请求，定时重发
- forking cluster：并行调用多个服务器，只要一个成功即返回
- broadcast cluster：广播所有提供者，逐个调用，任意一台失败则报错

### 服务降级
@Reference(mock="force:return null")
不进行调用，直接返回null

@Reference(mock="fail:return null")
失败之后返回null