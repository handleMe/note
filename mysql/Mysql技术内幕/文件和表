# 文件
- 参数文件：指定某些初始化参数，对某种内存结构大小设置等；告诉MySQL实例可以再哪里找到数据库文件
- 日志文件：记录读某种条件作出响应写入的文件，如：错误日志、二进制日志文件、慢查询日志文件、查询日志文件等
- socket文件：当用UNIX域饶姐自方式进行连接时需要的文件
- pid文件：MySQL实例的进程ID文件
- 表结构文件：存储表结构定义
- 存储引擎文件：每种存储引擎有自己的存储方式；记录了记录】】数据和索引等数据

## 参数文件
my.cnf
```
show variables查看数据库中的所有参数
也可以通过sql的方式来查询
select * from global_variables where variable_name like 'inno_%';
```

### 参数类型
- 动态参数dynamic
- 静态参数static

动态参数时可以通过SET进行修改的，而静态参数在实例运行期间是不能修改的

## 日志文件
- 错误日志 error log
- 二进制文件 binlog
- 慢查询日志 slow qurey log
- 查询日志 log
### 错误日志
	记录了Mysql启动、运行、关闭过程中的错误、警告和一些正常的信息
```
show variables like '%log_error%'
可以查看错误日志文件的位置
```
可以通过错误日志的一些警告来进行优化

### 慢查询日志
**参数long_query_time=5表示超过5秒的查询被认定是慢查询**
**
默认情况下Mysql不启用慢查询日志
参数log_slow_queries可以开启这个功能
启用参数log_queries_not_using_indexes会记录没有使用索引的查询
**
5.6.5后新增参数log_throttle_queries_not_using_indexes=5
这表示每分钟允许记录 未使用索引的sql条数，0（默认）表示没有限制
因为在生产环境中，此类sql会频繁的记录，从而导致slow log文件大小不断增加

日志文件会越来越大，不便于查看
可以使用mysqldumpslow 来查询
执行时间最长的10条sql：mysqldumpslow -s al -n 10 xxxx.log

**v5.1之后，可以再mysql.slow_log中查看慢查询日志了
但这需要将log_output设置为TABLE；默认为FILE存储在文件中；参数时动态的、全局的；所以可以再线上进行修改
**

InnoSQL的扩展：
区分物理读取和逻辑读取，物理读取就是磁盘读取，逻辑读取时所有的读取：磁盘IO和访问缓冲池
long_query_io将超过指定逻辑IO次数的sql记录
参数slow_qurey_type用来兼容MYSQL版本
- 0：不记录slow log
- 1：根据运行时间记录slow log
- 2：根据逻辑IO次数记录
- 3：根据运行时间和逻辑IO次数来记录

### 查询日志
	记录所有对数据库的请求信息，无论是否得到了正确的执行

### 二进制日志
	记录所有的更改操作，即使修改操作没有导致数据变更；
功能：
- 恢复：某些数据的恢复需要二进制文件
- 复制：通过复制和执行二进制文件使其他的Mysql数据库与本实例进行同步
- 审计：用户可以通过二进制文件中的信息来审计，判断是否对数据库进行注入攻击

日志文件名称为xxxx.0000001后缀时二进制文件的序列号
xxxx.index是二进制日志文件的索引文件，存储过往产生的二进制日志序号

binlog默认是关闭的

下列参数影响binlog的记录信息和行为：
- max_binlog_size：指定了文件的最大值，超过了这个值，产生新的文件，后缀名+1
- binlog_cache_size：未提交事务的二进制日志会记录到一个缓存，大小由该参数指定，默认32KB，这个缓存时基于session（会话）的，每个线程开启事务都会分配，这个值不能太大；这个值也不能太小，因为事务记录大于这块内存就会使用临时文件记录
	- show global status like 'binlog_cache%'查看使用临时文件和使用缓存的次数；如果使用文件次数多，就要考虑加大这个配置
- sync_binlog：表示每写缓存多少次就同步到磁盘，1表示同步写；默认值是0；如果使用InnoDB进行复制，并要得到最大的高可用性，建议将值设置为ON；但是会对IO系统带来一定的影响
- binlog-do-db：表示需要写入哪些库的日志；默认为空
- binlog-ignore-db：表示需要忽略哪些库的日志；默认为空
- log-slave-update：从库是否将同步到的binlog日志存储到自己的binlog
- binlog_format：
	- statement：二进制文件记录的记录日志的逻辑SQL语句
	- row：不再是简单的SQL语句了，二是记录表的行更改情况（不易阅读）
	- mixed：默认采用statement，在有些情况下会使用row格式
		- 表的存储引擎是NDB，对标的DML操作都是row格式记录
		- 使用了UUID()、USER()、CURRENT_USER()、FOUND_ROWS()、ROW_COUNT()等不确定函数
		- 使用了Insert DELAY语句
		- 使用了临时表
**当前数据库是slave角色，则不会将从master取得的binlog写入到自己的binlog，如果salve还有slave，就需要使用参数log-slave-update将获取的binglog记录下来；**
使用mysqlbinlog命令来查看二进制文件
`mysqlbinlig --start0position=203 test.000004`

## 套接字文件
	在unix系统下本地连接MySQL可以采用unix域套接字方式，这种方式需要一个套接字（socket）文件，可以有参数socket控制，一般在/tmp目录下，mysql.sock

## PID文件
	实例启动后，会将自己的进程ID写入一个文件中 xx.pid
## 表结构定义文件
	每个表都有对应的表结构定义文件；不论采用哪种引擎，都有一个后缀是frm的文件
	frm也用来存放视图的定义
## InnoDB存储引擎文件
	每个存储引擎还有自己的文件
### 表空间文件
	InnoDB采用将存储的数据按表空间（tablespace）进行存放的设计。在默认配置下会有一个初始大小为10MB，名为ibdata1的文件；
	innodb_data_file_path可以用来设置表空间
```
innodb_data_file_path=/db/ibdata1:2000M;/db2/ibdata2:2000M:autoextend
这里将表空间分为两个文件，位于不同的磁盘，磁盘的负载可能被萍爵，因此提高了数据库的整体性能。文件1大小时2000MB；文件2大小时2000MB，如果用完了，可以自动增长（autoextend）
```
设置了innodb_data_file_path之后，设置参数innodb_file_per_table开启，InnoDB会为每个表生成一个独立的表空间：表名.ibd；

单独的表空间存储表的数据、索引、插入缓冲BITMAP等信息；其余信息还是存储在共享表空间中

### 重做日志文件
	InnoDB存储引擎的数据目录下会有两个名为ib_logfile0和iblogfile1的文件，这是InnoDB的重做日志文件
	每个InnoDB存储引擎至少有一个重做日志文件组（group）；每个文件组下至少有两个重做日志文件；可以设置多个镜像日志组（mirrored log groups），将不同的文件组放在不同的磁盘上，以此提高可用性；
	日志组中每个重做日志大小一致，循环写入；当ib_logfile0写满了，就会使用1，写满了再次使用0；
#### 重做日志文件参数
- innodb_log_file_size 指定文件大小；重做日志文件不能太小，可能会使一个事务的日志需要多次切换重做日志文件；也有可能导致频繁发生async checkpoint（会使所有用户线程阻塞）；太大则恢复时需要很长的时间
- innodb_log_files_in_group 指定文件组中文件数量；默认为2
- innodb_mirrored_log_groups 指定日志镜像文件组的数量；默认为1，表示只有一个文件组，没有镜像
- innodb_log_group_home_dir 指定文件组所在路径 默认./

### 与binlog有什么区别
- 记录范围不同，binlog记录数据库所有相关的日志记录；InnoDB的重做日志只记录innodb的事务日志
- 记录内容不同：binlog记录一个事务具体的操作内容；重做日志记录每个页更改的物理情况
- 写入时机不同：binlog仅在事务提交前提交，只写磁盘一次；事务进行过程中，不断有重做日志条目被写入重做日志文件

日志组成：
- redo_log_type：1字节，日志重做类型；目前已经有51中
- space：表示空间ID，采用压缩的方式，会占用空间可能小于4字节
- page_no：表示页的偏移量，同样采用压缩的方式
- redo_log_body：表示每个重做日志的数据部分
重做日志写入的时候时先写入重做日志缓冲redo log buffer，然后按照一定顺序写入日志文件；写入磁盘中的时候，按照512字节（一个扇区）的大小进行写入；因此写入必定成功；所以不需要doublewrite；

innodb_flush_log_at_trx_commit：
- 0：代表提交事务的时候，不进行刷新，等待主线程将重做日志写入磁盘
- 1：commit时将缓冲写入磁盘；即调用fsync
- 2：将重做日志异步写入磁盘，即只保证写入动作发生，不保证数据一定写入

为了保证持久性，设置为1；

## 表

### 索引组织表
InnoDB按照主键顺序组织存放数据；成为索引组织表
如果表没有显示的指定主键，则按照以下规则选择或者创建主键：
- 判断表中是否存在非空唯一索引（**单列的，而且是数值型的**），如果有，则该列即为主键；有多个的时候没选择第一个定义的非空唯一索引（定义索引的顺序，而不是创建列的顺序）
- 不符合条件1，就自动创建一个6字节大小的指针；最大值2的48次方；超过最大值就会从0开始，覆盖之前的值

### InnoDB的逻辑存储结构
所有数据都被逻辑的存储在tablespace中，表空间由段（segment）、区（extent）、页（page）也叫块（block）组成
#### 表空间
启用了innodb_file_per_table的参数；数据、索引和插入缓冲bitmap会写在单独的表空间，回滚（undo）信息、插入缓冲索引页、系统事务、二次写入缓冲等还是放在共享表空间
#### 段
表空间由各个段组成，常见的有数据段、索引段、回滚段等
数据段就是B+树的叶子结点；索引段就是非叶子节点
#### 区
由页组成的空间，任何情况下每个区大小都是1MB；一个区中有64个连续的页
页可以压缩，KEY_BLOCK_SIZE设置页大小为2K、4K、8K；对应的每个区有512/256/128个页
1.2+版本引入参数innodb_page_size，可以通过该参数设置页的大小时4K、8K；但是页中数据不是压缩的；区中页的数量就是256/128；
	每个段开始只会使用32个页大小的碎片页；使用完这些后才是64个连续页的申请，这样对于一些小表或者undo这样的段，可以再开始的时候节省空间

常见的页：
- 数据页B-tree Node
- undo页undo log page
- 系统页：System page
- 事务数据页：transaction system page
- 插入缓冲位图页Insert buffer bitmap
- 插入缓冲空闲列表页：Insert uffer tree list
- 未压缩的二进制大对象页：Uncompressed BLOB page
- 压缩的二进制大对象页：compressed BLOB page

#### 行
Innodb时面向行存储的

### 行记录格式

#### compact
变长字段长度列表|NULL标志位|记录头信息|列数据1...
- 变长字段长度列表-列长度小于255,1字节表示
- 打野255，用2字节表示

变长字段长度表示最大只有2个字节，因为varchar类型最大限制为65535
NUll标志位：有null值用1表示
头信息

#### redundant
兼容旧版本
字段长度偏移列表|头信息|列...

#### 行溢出数据
	text、bolb、varchar
varchar真是支持的最大长度位65532；varchar支持的最大长度是对字节而言，varchar(N)中的N是字符，所以不同字符集的表，支持的长度也是不同的；
而且varchar支持的65535是对一张表而言，一张表中所有varchar的长度和超过65534也会创建不成功；
	发生数据溢出（页大小超过16KB）的时候，超出数据存放在页类型为Uncompress BLOB的页中
	text和blob也不总是存储在Uncompress BLOB页中，数据少的时候也是存在数据页中；数据页中只保存前768个字节
	
#### Compressed和Dynamic
**行溢出的时候，数据页中只存储20个字节的指针，实际数据都存储在溢出的页中**

Compressed行记录格式会里zlib算法压缩数据；因此对于BLOB、TEXT、VARCHAR这样的大长度类型数据可以有效节省空间

#### CHAR的行存储结构
char是固定长度的字符类型；多以变长字段长度列表中没有char类型的长度；从v4.1开始char（N）
中的N指的是字符长度，内部对于未能沾满长度的字符填充0x20
### 数据页结构
- file header文件头 38字节
- page header 页头 56字节
- Infimun 和supermun records
- user records用户记录，即杭机路
- free space 空闲空间
- page directory页目录
- file trailer 文件结尾信息8字节

### Named File Formats机制



### 分区表
	分区是在服务器层实现的，但不是所有引擎都支持
mysql支持水平分区（同一表中不同行记录分配到不同的物理文件中）；
不支持垂直分区（同一表中的列分配到不同的物理文件）
支持局部分区索引（每个文件中都存储数据和索引）
不支持全局分区（索引存储在一个文件中数据分别放在不同分区）
分区类型：
- range：
- list
- hash：根据用户自定义的表达式进行分区，返回值不能为负
- key：根据mysql提供的hash函数进行分区

#### 子分区



#### 分区的null值
允许对null值做分区，null总是小于任何一个非null值

## 索引和算法
- B+树索引
- 全文索引
- hash索引

